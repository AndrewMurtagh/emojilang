Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> statement
Rule 3     statement -> PRINT L_PAREN expression R_PAREN
Rule 4     statement -> VARIABLE ASSIGNMENT expression
Rule 5     expression -> VARIABLE
Rule 6     expression -> NUMBER

Terminals, with rules where they appear

ASSIGNMENT           : 4
L_PAREN              : 3
NUMBER               : 6
PRINT                : 3
R_PAREN              : 3
VARIABLE             : 4 5
error                : 

Nonterminals, with rules where they appear

expression           : 3 4
statement            : 1 2
statements           : 1 0

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . PRINT L_PAREN expression R_PAREN
    (4) statement -> . VARIABLE ASSIGNMENT expression

    PRINT           shift and go to state 3
    VARIABLE        shift and go to state 4

    statements                     shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . PRINT L_PAREN expression R_PAREN
    (4) statement -> . VARIABLE ASSIGNMENT expression

    PRINT           shift and go to state 3
    VARIABLE        shift and go to state 4

    statement                      shift and go to state 5

state 2

    (2) statements -> statement .

    PRINT           reduce using rule 2 (statements -> statement .)
    VARIABLE        reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)


state 3

    (3) statement -> PRINT . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 6


state 4

    (4) statement -> VARIABLE . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 7


state 5

    (1) statements -> statements statement .

    PRINT           reduce using rule 1 (statements -> statements statement .)
    VARIABLE        reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)


state 6

    (3) statement -> PRINT L_PAREN . expression R_PAREN
    (5) expression -> . VARIABLE
    (6) expression -> . NUMBER

    VARIABLE        shift and go to state 9
    NUMBER          shift and go to state 10

    expression                     shift and go to state 8

state 7

    (4) statement -> VARIABLE ASSIGNMENT . expression
    (5) expression -> . VARIABLE
    (6) expression -> . NUMBER

    VARIABLE        shift and go to state 9
    NUMBER          shift and go to state 10

    expression                     shift and go to state 11

state 8

    (3) statement -> PRINT L_PAREN expression . R_PAREN

    R_PAREN         shift and go to state 12


state 9

    (5) expression -> VARIABLE .

    R_PAREN         reduce using rule 5 (expression -> VARIABLE .)
    PRINT           reduce using rule 5 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 5 (expression -> VARIABLE .)
    $end            reduce using rule 5 (expression -> VARIABLE .)


state 10

    (6) expression -> NUMBER .

    R_PAREN         reduce using rule 6 (expression -> NUMBER .)
    PRINT           reduce using rule 6 (expression -> NUMBER .)
    VARIABLE        reduce using rule 6 (expression -> NUMBER .)
    $end            reduce using rule 6 (expression -> NUMBER .)


state 11

    (4) statement -> VARIABLE ASSIGNMENT expression .

    PRINT           reduce using rule 4 (statement -> VARIABLE ASSIGNMENT expression .)
    VARIABLE        reduce using rule 4 (statement -> VARIABLE ASSIGNMENT expression .)
    $end            reduce using rule 4 (statement -> VARIABLE ASSIGNMENT expression .)


state 12

    (3) statement -> PRINT L_PAREN expression R_PAREN .

    PRINT           reduce using rule 3 (statement -> PRINT L_PAREN expression R_PAREN .)
    VARIABLE        reduce using rule 3 (statement -> PRINT L_PAREN expression R_PAREN .)
    $end            reduce using rule 3 (statement -> PRINT L_PAREN expression R_PAREN .)

