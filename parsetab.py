
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT COMMENT EQUALITY FALSE IF L_BRACKET L_PAREN NUMBER PRINT R_BRACKET R_PAREN TRUE VARIABLEstatements : statements statement\n        | statementstatement : PRINT L_PAREN expression R_PARENstatement : VARIABLE ASSIGNMENT expressionstatement : IF L_PAREN expression_boolean R_PAREN L_BRACKET append_stack statements pop_stack R_BRACKET expression_boolean : expression_boolean_comparison\n        | expression_true\n        | expression_falseexpression_boolean_comparison : expression EQUALITY expressionexpression : VARIABLEexpression_true : TRUEexpression_false : FALSEexpression : NUMBER\n    append_stack :\n    \n    pop_stack :\n    '
    
_lr_action_items = {'PRINT':([0,1,2,6,11,12,13,21,24,26,27,29,],[3,3,-2,-1,-10,-13,-4,-3,-14,3,3,-5,]),'VARIABLE':([0,1,2,6,7,8,9,11,12,13,21,23,24,26,27,29,],[4,4,-2,-1,11,11,11,-10,-13,-4,-3,11,-14,4,4,-5,]),'IF':([0,1,2,6,11,12,13,21,24,26,27,29,],[5,5,-2,-1,-10,-13,-4,-3,-14,5,5,-5,]),'$end':([1,2,6,11,12,13,21,29,],[0,-2,-1,-10,-13,-4,-3,-5,]),'R_BRACKET':([2,6,11,12,13,21,27,28,29,],[-2,-1,-10,-13,-4,-3,-15,29,-5,]),'L_PAREN':([3,5,],[7,9,]),'ASSIGNMENT':([4,],[8,]),'NUMBER':([7,8,9,23,],[12,12,12,12,]),'TRUE':([9,],[19,]),'FALSE':([9,],[20,]),'R_PAREN':([10,11,12,14,15,16,17,19,20,25,],[21,-10,-13,22,-6,-7,-8,-11,-12,-9,]),'EQUALITY':([11,12,18,],[-10,-13,23,]),'L_BRACKET':([22,],[24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,26,],[1,27,]),'statement':([0,1,26,27,],[2,6,2,6,]),'expression':([7,8,9,23,],[10,13,18,25,]),'expression_boolean':([9,],[14,]),'expression_boolean_comparison':([9,],[15,]),'expression_true':([9,],[16,]),'expression_false':([9,],[17,]),'append_stack':([24,],[26,]),'pop_stack':([27,],[28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement','statements',2,'p_statements','main.py',136),
  ('statements -> statement','statements',1,'p_statements','main.py',137),
  ('statement -> PRINT L_PAREN expression R_PAREN','statement',4,'p_statement_print','main.py',141),
  ('statement -> VARIABLE ASSIGNMENT expression','statement',3,'p_statement_assign','main.py',147),
  ('statement -> IF L_PAREN expression_boolean R_PAREN L_BRACKET append_stack statements pop_stack R_BRACKET','statement',9,'p_statement_if','main.py',151),
  ('expression_boolean -> expression_boolean_comparison','expression_boolean',1,'p_expression_boolean','main.py',158),
  ('expression_boolean -> expression_true','expression_boolean',1,'p_expression_boolean','main.py',159),
  ('expression_boolean -> expression_false','expression_boolean',1,'p_expression_boolean','main.py',160),
  ('expression_boolean_comparison -> expression EQUALITY expression','expression_boolean_comparison',3,'p_expression_boolean_comparison','main.py',164),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','main.py',169),
  ('expression_true -> TRUE','expression_true',1,'p_expression_true','main.py',177),
  ('expression_false -> FALSE','expression_false',1,'p_expression_false','main.py',181),
  ('expression -> NUMBER','expression',1,'p_expression_number','main.py',185),
  ('append_stack -> <empty>','append_stack',0,'p_append_stack','main.py',190),
  ('pop_stack -> <empty>','pop_stack',0,'p_pop_stack','main.py',199),
]
